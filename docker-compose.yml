version: "3.5"
services:
  #etcd配置
  etcd:
    hostname: etcd
    image: bitnami/etcd:3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    privileged: true
    volumes:
      - "/data/Development/volume/etcd/data:/opt/bitnami/etcd/data"
    environment:
      - "ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379"
      - "ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379"
      - "ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380"
      - "ETCD_INITIAL_ADVERTISE_PEER_URLS=http://0.0.0.0:2380"
      - "ALLOW_NONE_AUTHENTICATION=yes"
      - "ETCD_INITIAL_CLUSTER=node1=http://0.0.0.0:2380"
      - "ETCD_NAME=node1"
      - "ETCD_DATA_DIR=/opt/bitnami/etcd/data"
    ports:
      - "2379:2379"
      - "2380:2380"
    networks:
      monitor:
        ipv4_address: 172.19.0.20
  #agent 1配置
  agent01:
    build:
      context: .
      dockerfile: agent01_dockerfile
    hostname: agent01
    container_name: agent01
    networks:
      monitor:
        ipv4_address: 172.19.0.2
    restart: on-failure
    depends_on:
      - etcd
      - report_service01
      - report_service02
      - report_service03
  #agent 2配置
  agent02:
    build:
      context: .
      dockerfile: agent02_dockerfile
    hostname: agent02
    container_name: agent02
    networks:
      monitor:
        ipv4_address: 172.19.0.3
    restart: on-failure
    depends_on:
      - etcd
      - report_service01
      - report_service02
      - report_service03
  #mysql
  mysql:
    image: mysql:8
    hostname: mysql
    container_name: mysql
    restart: unless-stopped
    ports:
      - 3307:3306
    networks:
      monitor:
        ipv4_address: 172.19.0.4
    environment:
        MYSQL_USER: monitor
        MYSQL_PASSWORD: 123
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: golang
    volumes:
      - /data/Development/volume/mysql/data:/var/lib/mysql
    command:
      - '--default-authentication-plugin=mysql_native_password'
  #数据分析模块
  data_analyze_service:
    restart: on-failure
    build:
      context: .
      dockerfile: dataAnalyzeService_dockerfile
    hostname: dataAnalyzeService
    container_name: dataAnalyzeService
    networks:
      monitor:
        ipv4_address: 172.19.0.5
    depends_on:
      - persistent_service
    ports:
      - "8010:8010"
      - "8020:8020"
  #上报模块01
  report_service01:
    restart: on-failure
    build:
      context: .
      dockerfile: reportService01_dockerfile
    hostname: reportService01
    container_name: reportService01
    networks:
      monitor:
        ipv4_address: 172.19.0.6
    depends_on:
      - mysql
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8000:8000"
  #上报模块02
  report_service02:
    restart: on-failure
    build:
      context: .
      dockerfile: reportService02_dockerfile
    hostname: reportService02
    container_name: reportService02
    networks:
      monitor:
        ipv4_address: 172.19.0.7
    depends_on:
      - mysql
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8001:8001"
  #上报模块03
  report_service03:
    restart: on-failure
    build:
      context: .
      dockerfile: reportService03_dockerfile
    hostname: reportService03
    container_name: reportService03
    networks:
      monitor:
        ipv4_address: 172.19.0.8
    depends_on:
      - mysql
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8003:8003"
  #持久化模块
  persistent_service:
    restart: on-failure
    build:
      context: .
      dockerfile: persistentService_dockerfile
    hostname: persistentService
    container_name: persistentService
    networks:
      monitor:
        ipv4_address: 172.19.0.9
    depends_on:
      - agent01
      - agent02
      - report_service01
      - report_service02
      - report_service03
  #告警模块
  warning_service:
    restart: on-failure
    build:
      context: .
      dockerfile: warningService_dockerfile
    hostname: warningService
    container_name: warningService
    networks:
      monitor:
        ipv4_address: 172.19.0.10
  #系统配置模块
  manage_service:
    restart: on-failure
    build:
      context: .
      dockerfile: manageService_dockerfile
    hostname: manageService
    container_name: manageService
    networks:
      monitor:
        ipv4_address: 172.19.0.11
    ports:
      - "8030:8030"
      - "8040:8040"
    depends_on:
      - warning_service
      - mysql
  #zk配置
  zoo1:
    image: zookeeper
    hostname: zoo1
    container_name: zoo1
    restart: unless-stopped
    ports:
      - 2181:2181
    volumes:
      - "/data/Development/volume/zkcluster/zoo1/data:/data"
      - "/data/Development/volume/zkcluster/zoo1/datalog:/datalog"
    environment:
      ZOO_PORT: 2181
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
    networks:
      monitor:
        ipv4_address: 172.19.0.12
  zoo2:
    image: zookeeper
    hostname: zoo2
    container_name: zoo2
    restart: unless-stopped
    ports:
      - 2182:2181
    volumes:
      - "/data/Development/volume/zkcluster/zoo2/data:/data"
      - "/data/Development/volume/volume/zkcluster/zoo2/datalog:/datalog"
    environment:
      ZOO_MY_ID: 2
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zoo3:2888:3888;2181
    networks:
      monitor:
        ipv4_address: 172.19.0.13
  zoo3:
    image: zookeeper
    hostname: zoo3
    container_name: zoo3
    restart: unless-stopped
    ports:
      - 2183:2181
    volumes:
      - "/data/Development/volume/zkcluster/zoo3/data:/data"
      - "/data/Development/volume/zkcluster/zoo3/datalog:/datalog"
    environment:
      ZOO_MY_ID: 3
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181
    networks:
      monitor:
        ipv4_address: 172.19.0.14
  #kafka 配置
  # 222.200.105.85要替换为宿主机ip
  kafka1:
    image: wurstmeister/kafka
    restart: on-failure
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_HOST_NAME: kafka1
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:9092
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_BROKER_ID: 1
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    volumes:
      - /data/Development/volume/kfkluster/kafka1/logs:/kafka
    networks:
      monitor:
        ipv4_address: 172.19.0.15
  kafka2:
    image: wurstmeister/kafka
    restart: on-failure
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_HOST_NAME: kafka2
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:9093
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_BROKER_ID: 2
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    volumes:
      - /data/Development/volume/kfkluster/kafka2/logs:/kafka
    networks:
      monitor:
        ipv4_address: 172.19.0.16
  kafka3:
    image: wurstmeister/kafka
    restart: on-failure
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      #      175.178.91.147
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_HOST_NAME: kafka3
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:9094
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_BROKER_ID: 3
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    volumes:
      - /data/Development/volume/kfkluster/kafka3/logs:/kafka
    networks:
      monitor:
        ipv4_address: 172.19.0.17
  #前端nginx
  nginx:
    build:
      context: .
      dockerfile: nginx_dockerfile
    networks:
      monitor:
        ipv4_address: 172.19.0.19
    restart: on-failure
    ports:
      - "9090:80"
#自定义网络
networks:
  monitor:
    name: monitor
    ipam:
      config:
        - subnet: 172.19.0.0/24 #子网
          gateway: 172.19.0.1
    driver: bridge #网桥模式